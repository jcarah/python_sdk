# coding: utf-8

"""
    Looker API 3.1 Reference

    ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  Note! With great power comes great responsibility: The \"Try It Out!\" button makes API calls to your live Looker instance. Be especially careful with destructive API operations such as `delete_user` or similar. There is no \"undo\" for API operations.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning)  This **API 3.1** is in active development. This is where support for new Looker features will appear as non-breaking additions - new functions, new optional parameters on existing functions, or new optional properties in existing types. Additive changes should not impact your existing application code that calls the Looker API. Your existing application code will not be aware of any new Looker API functionality until you choose to upgrade your app to use a newer Looker API client SDK release.  The following are a few examples of noteworthy items that have changed between API 3.0 and API 3.1. For more comprehensive coverage of API changes, please see the release notes for your Looker release.   ### Examples of new things added in API 3.1:  * Dashboard construction APIs * Themes and custom color collections APIs * Create and run SQL_runner queries * Create and run merged results queries * Create and modify dashboard filters * Create and modify password requirements   ### Deprecated in API 3.0  The following functions and properties have been deprecated in API 3.0.  They continue to exist and work in API 3.0 for the next several Looker releases but they have not been carried forward to API 3.1:  * Dashboard Prefetch functions * User access_filter functions * User API 1.0 credentials functions * Space.is_root and Space.is_user_root properties. Use Space.is_shared_root and Space.is_users_root instead.   ### Semantic changes in API 3.1:  * `all_looks` no longer includes soft-deleted looks, matching `all_dashboards` behavior. You can find soft-deleted looks using `search_looks` with the `deleted` param set to True. * `all_spaces` no longer includes duplicate items * `search_users` no longer accepts Y,y,1,0,N,n for Boolean params, only \"true\" and \"false\". * For greater client and network compatibility, `render_task_results` now returns HTTP status ***202 Accepted*** instead of HTTP status ***102 Processing*** * `all_running_queries` and `kill_query` functions have moved into the `Query` function group.   If you have application code which relies on the old behavior of the APIs above, you may continue using the API 3.0 functions in this Looker release. We strongly suggest you update your code to use API 3.1 analogs as soon as possible.  

    OpenAPI spec version: 3.1.0
    Contact: support@looker.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class HomepageApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def all_homepage_items(self, **kwargs):
        """
        Get All Homepage Items
        ### Get information about all homepage items. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.all_homepage_items(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str fields: Requested fields.
        :param str sorts: Fields to sort by.
        :param str homepage_section_id: Filter to a specific homepage section
        :return: list[HomepageItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.all_homepage_items_with_http_info(**kwargs)
        else:
            (data) = self.all_homepage_items_with_http_info(**kwargs)
            return data

    def all_homepage_items_with_http_info(self, **kwargs):
        """
        Get All Homepage Items
        ### Get information about all homepage items. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.all_homepage_items_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str fields: Requested fields.
        :param str sorts: Fields to sort by.
        :param str homepage_section_id: Filter to a specific homepage section
        :return: list[HomepageItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields', 'sorts', 'homepage_section_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_homepage_items" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/homepage_items'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'sorts' in params:
            query_params['sorts'] = params['sorts']
        if 'homepage_section_id' in params:
            query_params['homepage_section_id'] = params['homepage_section_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[HomepageItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def all_homepage_sections(self, **kwargs):
        """
        Get All Homepage sections
        ### Get information about all homepage sections. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.all_homepage_sections(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str fields: Requested fields.
        :param str sorts: Fields to sort by.
        :return: list[HomepageSection]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.all_homepage_sections_with_http_info(**kwargs)
        else:
            (data) = self.all_homepage_sections_with_http_info(**kwargs)
            return data

    def all_homepage_sections_with_http_info(self, **kwargs):
        """
        Get All Homepage sections
        ### Get information about all homepage sections. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.all_homepage_sections_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str fields: Requested fields.
        :param str sorts: Fields to sort by.
        :return: list[HomepageSection]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields', 'sorts']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_homepage_sections" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/homepage_sections'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'sorts' in params:
            query_params['sorts'] = params['sorts']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[HomepageSection]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def all_homepages(self, **kwargs):
        """
        Get All Homepages
        ### Get information about all homepages. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.all_homepages(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str fields: Requested fields.
        :return: list[Homepage]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.all_homepages_with_http_info(**kwargs)
        else:
            (data) = self.all_homepages_with_http_info(**kwargs)
            return data

    def all_homepages_with_http_info(self, **kwargs):
        """
        Get All Homepages
        ### Get information about all homepages. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.all_homepages_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str fields: Requested fields.
        :return: list[Homepage]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_homepages" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/homepages'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Homepage]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_homepage(self, **kwargs):
        """
        Create Homepage
        ### Create a new homepage. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_homepage(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Homepage body: Homepage
        :param str fields: Requested fields.
        :return: Homepage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_homepage_with_http_info(**kwargs)
        else:
            (data) = self.create_homepage_with_http_info(**kwargs)
            return data

    def create_homepage_with_http_info(self, **kwargs):
        """
        Create Homepage
        ### Create a new homepage. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_homepage_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Homepage body: Homepage
        :param str fields: Requested fields.
        :return: Homepage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_homepage" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/homepages'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Homepage',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_homepage_item(self, **kwargs):
        """
        Create Homepage Item
        ### Create a new homepage item. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_homepage_item(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param HomepageItem body: Homepage Item
        :param str fields: Requested fields.
        :return: HomepageItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_homepage_item_with_http_info(**kwargs)
        else:
            (data) = self.create_homepage_item_with_http_info(**kwargs)
            return data

    def create_homepage_item_with_http_info(self, **kwargs):
        """
        Create Homepage Item
        ### Create a new homepage item. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_homepage_item_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param HomepageItem body: Homepage Item
        :param str fields: Requested fields.
        :return: HomepageItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_homepage_item" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/homepage_items'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='HomepageItem',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_homepage_section(self, **kwargs):
        """
        Create Homepage section
        ### Create a new homepage section. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_homepage_section(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param HomepageSection body: Homepage section
        :param str fields: Requested fields.
        :return: HomepageSection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_homepage_section_with_http_info(**kwargs)
        else:
            (data) = self.create_homepage_section_with_http_info(**kwargs)
            return data

    def create_homepage_section_with_http_info(self, **kwargs):
        """
        Create Homepage section
        ### Create a new homepage section. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_homepage_section_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param HomepageSection body: Homepage section
        :param str fields: Requested fields.
        :return: HomepageSection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_homepage_section" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/homepage_sections'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='HomepageSection',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_homepage(self, homepage_id, **kwargs):
        """
        Delete Homepage
        ### Delete a homepage. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_homepage(homepage_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int homepage_id: Id of homepage (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_homepage_with_http_info(homepage_id, **kwargs)
        else:
            (data) = self.delete_homepage_with_http_info(homepage_id, **kwargs)
            return data

    def delete_homepage_with_http_info(self, homepage_id, **kwargs):
        """
        Delete Homepage
        ### Delete a homepage. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_homepage_with_http_info(homepage_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int homepage_id: Id of homepage (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['homepage_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_homepage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'homepage_id' is set
        if ('homepage_id' not in params) or (params['homepage_id'] is None):
            raise ValueError("Missing the required parameter `homepage_id` when calling `delete_homepage`")


        collection_formats = {}

        resource_path = '/homepages/{homepage_id}'.replace('{format}', 'json')
        path_params = {}
        if 'homepage_id' in params:
            path_params['homepage_id'] = params['homepage_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_homepage_item(self, homepage_item_id, **kwargs):
        """
        Delete Homepage Item
        ### Delete a homepage item. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_homepage_item(homepage_item_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int homepage_item_id: Id of homepage_item (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_homepage_item_with_http_info(homepage_item_id, **kwargs)
        else:
            (data) = self.delete_homepage_item_with_http_info(homepage_item_id, **kwargs)
            return data

    def delete_homepage_item_with_http_info(self, homepage_item_id, **kwargs):
        """
        Delete Homepage Item
        ### Delete a homepage item. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_homepage_item_with_http_info(homepage_item_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int homepage_item_id: Id of homepage_item (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['homepage_item_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_homepage_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'homepage_item_id' is set
        if ('homepage_item_id' not in params) or (params['homepage_item_id'] is None):
            raise ValueError("Missing the required parameter `homepage_item_id` when calling `delete_homepage_item`")


        collection_formats = {}

        resource_path = '/homepage_items/{homepage_item_id}'.replace('{format}', 'json')
        path_params = {}
        if 'homepage_item_id' in params:
            path_params['homepage_item_id'] = params['homepage_item_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_homepage_section(self, homepage_section_id, **kwargs):
        """
        Delete Homepage section
        ### Delete a homepage section. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_homepage_section(homepage_section_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int homepage_section_id: Id of homepage_section (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_homepage_section_with_http_info(homepage_section_id, **kwargs)
        else:
            (data) = self.delete_homepage_section_with_http_info(homepage_section_id, **kwargs)
            return data

    def delete_homepage_section_with_http_info(self, homepage_section_id, **kwargs):
        """
        Delete Homepage section
        ### Delete a homepage section. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_homepage_section_with_http_info(homepage_section_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int homepage_section_id: Id of homepage_section (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['homepage_section_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_homepage_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'homepage_section_id' is set
        if ('homepage_section_id' not in params) or (params['homepage_section_id'] is None):
            raise ValueError("Missing the required parameter `homepage_section_id` when calling `delete_homepage_section`")


        collection_formats = {}

        resource_path = '/homepage_sections/{homepage_section_id}'.replace('{format}', 'json')
        path_params = {}
        if 'homepage_section_id' in params:
            path_params['homepage_section_id'] = params['homepage_section_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def homepage(self, homepage_id, **kwargs):
        """
        Get Homepage
        ### Get information about a homepage. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.homepage(homepage_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int homepage_id: Id of homepage (required)
        :param str fields: Requested fields.
        :return: Homepage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.homepage_with_http_info(homepage_id, **kwargs)
        else:
            (data) = self.homepage_with_http_info(homepage_id, **kwargs)
            return data

    def homepage_with_http_info(self, homepage_id, **kwargs):
        """
        Get Homepage
        ### Get information about a homepage. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.homepage_with_http_info(homepage_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int homepage_id: Id of homepage (required)
        :param str fields: Requested fields.
        :return: Homepage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['homepage_id', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method homepage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'homepage_id' is set
        if ('homepage_id' not in params) or (params['homepage_id'] is None):
            raise ValueError("Missing the required parameter `homepage_id` when calling `homepage`")


        collection_formats = {}

        resource_path = '/homepages/{homepage_id}'.replace('{format}', 'json')
        path_params = {}
        if 'homepage_id' in params:
            path_params['homepage_id'] = params['homepage_id']

        query_params = {}
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Homepage',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def homepage_item(self, homepage_item_id, **kwargs):
        """
        Get Homepage Item
        ### Get information about a homepage item. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.homepage_item(homepage_item_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int homepage_item_id: Id of homepage item (required)
        :param str fields: Requested fields.
        :return: HomepageItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.homepage_item_with_http_info(homepage_item_id, **kwargs)
        else:
            (data) = self.homepage_item_with_http_info(homepage_item_id, **kwargs)
            return data

    def homepage_item_with_http_info(self, homepage_item_id, **kwargs):
        """
        Get Homepage Item
        ### Get information about a homepage item. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.homepage_item_with_http_info(homepage_item_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int homepage_item_id: Id of homepage item (required)
        :param str fields: Requested fields.
        :return: HomepageItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['homepage_item_id', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method homepage_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'homepage_item_id' is set
        if ('homepage_item_id' not in params) or (params['homepage_item_id'] is None):
            raise ValueError("Missing the required parameter `homepage_item_id` when calling `homepage_item`")


        collection_formats = {}

        resource_path = '/homepage_items/{homepage_item_id}'.replace('{format}', 'json')
        path_params = {}
        if 'homepage_item_id' in params:
            path_params['homepage_item_id'] = params['homepage_item_id']

        query_params = {}
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='HomepageItem',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def homepage_section(self, homepage_section_id, **kwargs):
        """
        Get Homepage section
        ### Get information about a homepage section. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.homepage_section(homepage_section_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int homepage_section_id: Id of homepage section (required)
        :param str fields: Requested fields.
        :return: HomepageSection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.homepage_section_with_http_info(homepage_section_id, **kwargs)
        else:
            (data) = self.homepage_section_with_http_info(homepage_section_id, **kwargs)
            return data

    def homepage_section_with_http_info(self, homepage_section_id, **kwargs):
        """
        Get Homepage section
        ### Get information about a homepage section. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.homepage_section_with_http_info(homepage_section_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int homepage_section_id: Id of homepage section (required)
        :param str fields: Requested fields.
        :return: HomepageSection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['homepage_section_id', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method homepage_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'homepage_section_id' is set
        if ('homepage_section_id' not in params) or (params['homepage_section_id'] is None):
            raise ValueError("Missing the required parameter `homepage_section_id` when calling `homepage_section`")


        collection_formats = {}

        resource_path = '/homepage_sections/{homepage_section_id}'.replace('{format}', 'json')
        path_params = {}
        if 'homepage_section_id' in params:
            path_params['homepage_section_id'] = params['homepage_section_id']

        query_params = {}
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='HomepageSection',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def search_homepages(self, **kwargs):
        """
        Search Homepages
        ### Search Homepages  If multiple search params are given and `filter_or` is FALSE or not specified, search params are combined in a logical AND operation. Only rows that match *all* search param criteria will be returned.  If `filter_or` is TRUE, multiple search params are combined in a logical OR operation. Results will include rows that match **any** of the search criteria.  String search params use case-insensitive matching. String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions. example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\" example=\"D_m%\" will match \"Damage\" and \"dump\"  Integer search params can accept a single value or a comma separated list of values. The multiple values will be combined under a logical OR operation - results will match at least one of the given values.  Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match or exclude (respectively) rows where the column is null.  Boolean search params accept only \"true\" and \"false\" as values.  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_homepages(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str title: Matches homepage title.
        :param str created_at: Matches the timestamp for when the homepage was created.
        :param str first_name: The first name of the user who created this homepage.
        :param str last_name: The last name of the user who created this homepage.
        :param str fields: Requested fields.
        :param bool favorited: Return favorited homepages when true.
        :param str creator_id: Filter on homepages created by a particular user.
        :param str sorts: The fields to sort the results by
        :param int page: The page to return.
        :param int per_page: The number of items in the returned page.
        :param int offset: The number of items to skip before returning any. (used with limit and takes priority over page and per_page)
        :param int limit: The maximum number of items to return. (used with offset and takes priority over page and per_page)
        :param bool filter_or: Combine given search criteria in a boolean OR expression
        :return: list[Homepage]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.search_homepages_with_http_info(**kwargs)
        else:
            (data) = self.search_homepages_with_http_info(**kwargs)
            return data

    def search_homepages_with_http_info(self, **kwargs):
        """
        Search Homepages
        ### Search Homepages  If multiple search params are given and `filter_or` is FALSE or not specified, search params are combined in a logical AND operation. Only rows that match *all* search param criteria will be returned.  If `filter_or` is TRUE, multiple search params are combined in a logical OR operation. Results will include rows that match **any** of the search criteria.  String search params use case-insensitive matching. String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions. example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\" example=\"D_m%\" will match \"Damage\" and \"dump\"  Integer search params can accept a single value or a comma separated list of values. The multiple values will be combined under a logical OR operation - results will match at least one of the given values.  Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match or exclude (respectively) rows where the column is null.  Boolean search params accept only \"true\" and \"false\" as values.  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_homepages_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str title: Matches homepage title.
        :param str created_at: Matches the timestamp for when the homepage was created.
        :param str first_name: The first name of the user who created this homepage.
        :param str last_name: The last name of the user who created this homepage.
        :param str fields: Requested fields.
        :param bool favorited: Return favorited homepages when true.
        :param str creator_id: Filter on homepages created by a particular user.
        :param str sorts: The fields to sort the results by
        :param int page: The page to return.
        :param int per_page: The number of items in the returned page.
        :param int offset: The number of items to skip before returning any. (used with limit and takes priority over page and per_page)
        :param int limit: The maximum number of items to return. (used with offset and takes priority over page and per_page)
        :param bool filter_or: Combine given search criteria in a boolean OR expression
        :return: list[Homepage]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['title', 'created_at', 'first_name', 'last_name', 'fields', 'favorited', 'creator_id', 'sorts', 'page', 'per_page', 'offset', 'limit', 'filter_or']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_homepages" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/homepages/search'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'title' in params:
            query_params['title'] = params['title']
        if 'created_at' in params:
            query_params['created_at'] = params['created_at']
        if 'first_name' in params:
            query_params['first_name'] = params['first_name']
        if 'last_name' in params:
            query_params['last_name'] = params['last_name']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'favorited' in params:
            query_params['favorited'] = params['favorited']
        if 'creator_id' in params:
            query_params['creator_id'] = params['creator_id']
        if 'sorts' in params:
            query_params['sorts'] = params['sorts']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'per_page' in params:
            query_params['per_page'] = params['per_page']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'filter_or' in params:
            query_params['filter_or'] = params['filter_or']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Homepage]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_homepage(self, homepage_id, body, **kwargs):
        """
        Update Homepage
        ### Update a homepage definition. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_homepage(homepage_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int homepage_id: Id of homepage (required)
        :param Homepage body: Homepage (required)
        :param str fields: Requested fields.
        :return: Homepage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_homepage_with_http_info(homepage_id, body, **kwargs)
        else:
            (data) = self.update_homepage_with_http_info(homepage_id, body, **kwargs)
            return data

    def update_homepage_with_http_info(self, homepage_id, body, **kwargs):
        """
        Update Homepage
        ### Update a homepage definition. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_homepage_with_http_info(homepage_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int homepage_id: Id of homepage (required)
        :param Homepage body: Homepage (required)
        :param str fields: Requested fields.
        :return: Homepage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['homepage_id', 'body', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_homepage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'homepage_id' is set
        if ('homepage_id' not in params) or (params['homepage_id'] is None):
            raise ValueError("Missing the required parameter `homepage_id` when calling `update_homepage`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_homepage`")


        collection_formats = {}

        resource_path = '/homepages/{homepage_id}'.replace('{format}', 'json')
        path_params = {}
        if 'homepage_id' in params:
            path_params['homepage_id'] = params['homepage_id']

        query_params = {}
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Homepage',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_homepage_item(self, homepage_item_id, body, **kwargs):
        """
        Update Homepage Item
        ### Update a homepage item definition. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_homepage_item(homepage_item_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int homepage_item_id: Id of homepage item (required)
        :param HomepageItem body: Homepage Item (required)
        :param str fields: Requested fields.
        :return: HomepageItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_homepage_item_with_http_info(homepage_item_id, body, **kwargs)
        else:
            (data) = self.update_homepage_item_with_http_info(homepage_item_id, body, **kwargs)
            return data

    def update_homepage_item_with_http_info(self, homepage_item_id, body, **kwargs):
        """
        Update Homepage Item
        ### Update a homepage item definition. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_homepage_item_with_http_info(homepage_item_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int homepage_item_id: Id of homepage item (required)
        :param HomepageItem body: Homepage Item (required)
        :param str fields: Requested fields.
        :return: HomepageItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['homepage_item_id', 'body', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_homepage_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'homepage_item_id' is set
        if ('homepage_item_id' not in params) or (params['homepage_item_id'] is None):
            raise ValueError("Missing the required parameter `homepage_item_id` when calling `update_homepage_item`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_homepage_item`")


        collection_formats = {}

        resource_path = '/homepage_items/{homepage_item_id}'.replace('{format}', 'json')
        path_params = {}
        if 'homepage_item_id' in params:
            path_params['homepage_item_id'] = params['homepage_item_id']

        query_params = {}
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='HomepageItem',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_homepage_section(self, homepage_section_id, body, **kwargs):
        """
        Update Homepage section
        ### Update a homepage section definition. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_homepage_section(homepage_section_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int homepage_section_id: Id of homepage section (required)
        :param HomepageSection body: Homepage section (required)
        :param str fields: Requested fields.
        :return: HomepageSection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_homepage_section_with_http_info(homepage_section_id, body, **kwargs)
        else:
            (data) = self.update_homepage_section_with_http_info(homepage_section_id, body, **kwargs)
            return data

    def update_homepage_section_with_http_info(self, homepage_section_id, body, **kwargs):
        """
        Update Homepage section
        ### Update a homepage section definition. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_homepage_section_with_http_info(homepage_section_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int homepage_section_id: Id of homepage section (required)
        :param HomepageSection body: Homepage section (required)
        :param str fields: Requested fields.
        :return: HomepageSection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['homepage_section_id', 'body', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_homepage_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'homepage_section_id' is set
        if ('homepage_section_id' not in params) or (params['homepage_section_id'] is None):
            raise ValueError("Missing the required parameter `homepage_section_id` when calling `update_homepage_section`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_homepage_section`")


        collection_formats = {}

        resource_path = '/homepage_sections/{homepage_section_id}'.replace('{format}', 'json')
        path_params = {}
        if 'homepage_section_id' in params:
            path_params['homepage_section_id'] = params['homepage_section_id']

        query_params = {}
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='HomepageSection',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
