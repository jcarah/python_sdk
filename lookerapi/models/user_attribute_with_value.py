# coding: utf-8

"""
    Looker API 3.1 Reference

    ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  Note! With great power comes great responsibility: The \"Try It Out!\" button makes API calls to your live Looker instance. Be especially careful with destructive API operations such as `delete_user` or similar. There is no \"undo\" for API operations.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning)  This **API 3.1** is in active development. This is where support for new Looker features will appear as non-breaking additions - new functions, new optional parameters on existing functions, or new optional properties in existing types. Additive changes should not impact your existing application code that calls the Looker API. Your existing application code will not be aware of any new Looker API functionality until you choose to upgrade your app to use a newer Looker API client SDK release.  The following are a few examples of noteworthy items that have changed between API 3.0 and API 3.1. For more comprehensive coverage of API changes, please see the release notes for your Looker release.   ### Examples of new things added in API 3.1:  * Dashboard construction APIs * Themes and custom color collections APIs * Create and run SQL_runner queries * Create and run merged results queries * Create and modify dashboard filters * Create and modify password requirements   ### Deprecated in API 3.0  The following functions and properties have been deprecated in API 3.0.  They continue to exist and work in API 3.0 for the next several Looker releases but they have not been carried forward to API 3.1:  * Dashboard Prefetch functions * User access_filter functions * User API 1.0 credentials functions * Space.is_root and Space.is_user_root properties. Use Space.is_shared_root and Space.is_users_root instead.   ### Semantic changes in API 3.1:  * `all_looks` no longer includes soft-deleted looks, matching `all_dashboards` behavior. You can find soft-deleted looks using `search_looks` with the `deleted` param set to True. * `all_spaces` no longer includes duplicate items * `search_users` no longer accepts Y,y,1,0,N,n for Boolean params, only \"true\" and \"false\". * For greater client and network compatibility, `render_task_results` now returns HTTP status ***202 Accepted*** instead of HTTP status ***102 Processing*** * `all_running_queries` and `kill_query` functions have moved into the `Query` function group.   If you have application code which relies on the old behavior of the APIs above, you may continue using the API 3.0 functions in this Looker release. We strongly suggest you update your code to use API 3.1 analogs as soon as possible.  

    OpenAPI spec version: 3.1.0
    Contact: support@looker.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserAttributeWithValue(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, label=None, rank=None, value=None, user_id=None, user_can_edit=None, value_is_hidden=None, user_attribute_id=None, source=None, hidden_value_domain_whitelist=None, can=None):
        """
        UserAttributeWithValue - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'label': 'str',
            'rank': 'int',
            'value': 'str',
            'user_id': 'int',
            'user_can_edit': 'bool',
            'value_is_hidden': 'bool',
            'user_attribute_id': 'int',
            'source': 'str',
            'hidden_value_domain_whitelist': 'str',
            'can': 'dict(str, bool)'
        }

        self.attribute_map = {
            'name': 'name',
            'label': 'label',
            'rank': 'rank',
            'value': 'value',
            'user_id': 'user_id',
            'user_can_edit': 'user_can_edit',
            'value_is_hidden': 'value_is_hidden',
            'user_attribute_id': 'user_attribute_id',
            'source': 'source',
            'hidden_value_domain_whitelist': 'hidden_value_domain_whitelist',
            'can': 'can'
        }

        self._name = name
        self._label = label
        self._rank = rank
        self._value = value
        self._user_id = user_id
        self._user_can_edit = user_can_edit
        self._value_is_hidden = value_is_hidden
        self._user_attribute_id = user_attribute_id
        self._source = source
        self._hidden_value_domain_whitelist = hidden_value_domain_whitelist
        self._can = can

    @property
    def name(self):
        """
        Gets the name of this UserAttributeWithValue.
        Name of user attribute

        :return: The name of this UserAttributeWithValue.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this UserAttributeWithValue.
        Name of user attribute

        :param name: The name of this UserAttributeWithValue.
        :type: str
        """

        self._name = name

    @property
    def label(self):
        """
        Gets the label of this UserAttributeWithValue.
        Human-friendly label for user attribute

        :return: The label of this UserAttributeWithValue.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this UserAttributeWithValue.
        Human-friendly label for user attribute

        :param label: The label of this UserAttributeWithValue.
        :type: str
        """

        self._label = label

    @property
    def rank(self):
        """
        Gets the rank of this UserAttributeWithValue.
        Precedence for setting value on user (lowest wins)

        :return: The rank of this UserAttributeWithValue.
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """
        Sets the rank of this UserAttributeWithValue.
        Precedence for setting value on user (lowest wins)

        :param rank: The rank of this UserAttributeWithValue.
        :type: int
        """

        self._rank = rank

    @property
    def value(self):
        """
        Gets the value of this UserAttributeWithValue.
        Value of attribute for user

        :return: The value of this UserAttributeWithValue.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this UserAttributeWithValue.
        Value of attribute for user

        :param value: The value of this UserAttributeWithValue.
        :type: str
        """

        self._value = value

    @property
    def user_id(self):
        """
        Gets the user_id of this UserAttributeWithValue.
        Id of User

        :return: The user_id of this UserAttributeWithValue.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this UserAttributeWithValue.
        Id of User

        :param user_id: The user_id of this UserAttributeWithValue.
        :type: int
        """

        self._user_id = user_id

    @property
    def user_can_edit(self):
        """
        Gets the user_can_edit of this UserAttributeWithValue.
        Can the user set this value

        :return: The user_can_edit of this UserAttributeWithValue.
        :rtype: bool
        """
        return self._user_can_edit

    @user_can_edit.setter
    def user_can_edit(self, user_can_edit):
        """
        Sets the user_can_edit of this UserAttributeWithValue.
        Can the user set this value

        :param user_can_edit: The user_can_edit of this UserAttributeWithValue.
        :type: bool
        """

        self._user_can_edit = user_can_edit

    @property
    def value_is_hidden(self):
        """
        Gets the value_is_hidden of this UserAttributeWithValue.
        If true, the \"value\" field will be null, because the attribute settings block access to this value

        :return: The value_is_hidden of this UserAttributeWithValue.
        :rtype: bool
        """
        return self._value_is_hidden

    @value_is_hidden.setter
    def value_is_hidden(self, value_is_hidden):
        """
        Sets the value_is_hidden of this UserAttributeWithValue.
        If true, the \"value\" field will be null, because the attribute settings block access to this value

        :param value_is_hidden: The value_is_hidden of this UserAttributeWithValue.
        :type: bool
        """

        self._value_is_hidden = value_is_hidden

    @property
    def user_attribute_id(self):
        """
        Gets the user_attribute_id of this UserAttributeWithValue.
        Id of User Attribute

        :return: The user_attribute_id of this UserAttributeWithValue.
        :rtype: int
        """
        return self._user_attribute_id

    @user_attribute_id.setter
    def user_attribute_id(self, user_attribute_id):
        """
        Sets the user_attribute_id of this UserAttributeWithValue.
        Id of User Attribute

        :param user_attribute_id: The user_attribute_id of this UserAttributeWithValue.
        :type: int
        """

        self._user_attribute_id = user_attribute_id

    @property
    def source(self):
        """
        Gets the source of this UserAttributeWithValue.
        How user got this value for this attribute

        :return: The source of this UserAttributeWithValue.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this UserAttributeWithValue.
        How user got this value for this attribute

        :param source: The source of this UserAttributeWithValue.
        :type: str
        """

        self._source = source

    @property
    def hidden_value_domain_whitelist(self):
        """
        Gets the hidden_value_domain_whitelist of this UserAttributeWithValue.
        If this user attribute is hidden, whitelist of destinations to which it may be sent.

        :return: The hidden_value_domain_whitelist of this UserAttributeWithValue.
        :rtype: str
        """
        return self._hidden_value_domain_whitelist

    @hidden_value_domain_whitelist.setter
    def hidden_value_domain_whitelist(self, hidden_value_domain_whitelist):
        """
        Sets the hidden_value_domain_whitelist of this UserAttributeWithValue.
        If this user attribute is hidden, whitelist of destinations to which it may be sent.

        :param hidden_value_domain_whitelist: The hidden_value_domain_whitelist of this UserAttributeWithValue.
        :type: str
        """

        self._hidden_value_domain_whitelist = hidden_value_domain_whitelist

    @property
    def can(self):
        """
        Gets the can of this UserAttributeWithValue.
        Operations the current user is able to perform on this object

        :return: The can of this UserAttributeWithValue.
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """
        Sets the can of this UserAttributeWithValue.
        Operations the current user is able to perform on this object

        :param can: The can of this UserAttributeWithValue.
        :type: dict(str, bool)
        """

        self._can = can

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UserAttributeWithValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
