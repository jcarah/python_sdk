# coding: utf-8

"""
    Looker API 3.1 Reference

    ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  Note! With great power comes great responsibility: The \"Try It Out!\" button makes API calls to your live Looker instance. Be especially careful with destructive API operations such as `delete_user` or similar. There is no \"undo\" for API operations.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning)  This **API 3.1** is in active development. This is where support for new Looker features will appear as non-breaking additions - new functions, new optional parameters on existing functions, or new optional properties in existing types. Additive changes should not impact your existing application code that calls the Looker API. Your existing application code will not be aware of any new Looker API functionality until you choose to upgrade your app to use a newer Looker API client SDK release.  The following are a few examples of noteworthy items that have changed between API 3.0 and API 3.1. For more comprehensive coverage of API changes, please see the release notes for your Looker release.   ### Examples of new things added in API 3.1:  * Dashboard construction APIs * Themes and custom color collections APIs * Create and run SQL_runner queries * Create and run merged results queries * Create and modify dashboard filters * Create and modify password requirements   ### Deprecated in API 3.0  The following functions and properties have been deprecated in API 3.0.  They continue to exist and work in API 3.0 for the next several Looker releases but they have not been carried forward to API 3.1:  * Dashboard Prefetch functions * User access_filter functions * User API 1.0 credentials functions * Space.is_root and Space.is_user_root properties. Use Space.is_shared_root and Space.is_users_root instead.   ### Semantic changes in API 3.1:  * `all_looks` no longer includes soft-deleted looks, matching `all_dashboards` behavior. You can find soft-deleted looks using `search_looks` with the `deleted` param set to True. * `all_spaces` no longer includes duplicate items * `search_users` no longer accepts Y,y,1,0,N,n for Boolean params, only \"true\" and \"false\". * For greater client and network compatibility, `render_task_results` now returns HTTP status ***202 Accepted*** instead of HTTP status ***102 Processing*** * `all_running_queries` and `kill_query` functions have moved into the `Query` function group.   If you have application code which relies on the old behavior of the APIs above, you may continue using the API 3.0 functions in this Looker release. We strongly suggest you update your code to use API 3.1 analogs as soon as possible.  

    OpenAPI spec version: 3.1.0
    Contact: support@looker.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Datagroup(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created_at=None, id=None, model_name=None, name=None, stale_before=None, trigger_check_at=None, trigger_error=None, trigger_value=None, triggered_at=None, can=None):
        """
        Datagroup - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created_at': 'int',
            'id': 'int',
            'model_name': 'str',
            'name': 'str',
            'stale_before': 'int',
            'trigger_check_at': 'int',
            'trigger_error': 'str',
            'trigger_value': 'str',
            'triggered_at': 'int',
            'can': 'dict(str, bool)'
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'id': 'id',
            'model_name': 'model_name',
            'name': 'name',
            'stale_before': 'stale_before',
            'trigger_check_at': 'trigger_check_at',
            'trigger_error': 'trigger_error',
            'trigger_value': 'trigger_value',
            'triggered_at': 'triggered_at',
            'can': 'can'
        }

        self._created_at = created_at
        self._id = id
        self._model_name = model_name
        self._name = name
        self._stale_before = stale_before
        self._trigger_check_at = trigger_check_at
        self._trigger_error = trigger_error
        self._trigger_value = trigger_value
        self._triggered_at = triggered_at
        self._can = can

    @property
    def created_at(self):
        """
        Gets the created_at of this Datagroup.
        UNIX timestamp at which this entry was created.

        :return: The created_at of this Datagroup.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Datagroup.
        UNIX timestamp at which this entry was created.

        :param created_at: The created_at of this Datagroup.
        :type: int
        """

        self._created_at = created_at

    @property
    def id(self):
        """
        Gets the id of this Datagroup.
        ID of the datagroup. Also used as the unique identifier.

        :return: The id of this Datagroup.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Datagroup.
        ID of the datagroup. Also used as the unique identifier.

        :param id: The id of this Datagroup.
        :type: int
        """

        self._id = id

    @property
    def model_name(self):
        """
        Gets the model_name of this Datagroup.
        Name of the model containing the datagroup. Unique when combined with name.

        :return: The model_name of this Datagroup.
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """
        Sets the model_name of this Datagroup.
        Name of the model containing the datagroup. Unique when combined with name.

        :param model_name: The model_name of this Datagroup.
        :type: str
        """

        self._model_name = model_name

    @property
    def name(self):
        """
        Gets the name of this Datagroup.
        Name of the datagroup. Unique when combined with model_name.

        :return: The name of this Datagroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Datagroup.
        Name of the datagroup. Unique when combined with model_name.

        :param name: The name of this Datagroup.
        :type: str
        """

        self._name = name

    @property
    def stale_before(self):
        """
        Gets the stale_before of this Datagroup.
        UNIX timestamp before which cache entries are considered stale. Cannot be in the future.

        :return: The stale_before of this Datagroup.
        :rtype: int
        """
        return self._stale_before

    @stale_before.setter
    def stale_before(self, stale_before):
        """
        Sets the stale_before of this Datagroup.
        UNIX timestamp before which cache entries are considered stale. Cannot be in the future.

        :param stale_before: The stale_before of this Datagroup.
        :type: int
        """

        self._stale_before = stale_before

    @property
    def trigger_check_at(self):
        """
        Gets the trigger_check_at of this Datagroup.
        UNIX timestamp at which this entry trigger was last checked.

        :return: The trigger_check_at of this Datagroup.
        :rtype: int
        """
        return self._trigger_check_at

    @trigger_check_at.setter
    def trigger_check_at(self, trigger_check_at):
        """
        Sets the trigger_check_at of this Datagroup.
        UNIX timestamp at which this entry trigger was last checked.

        :param trigger_check_at: The trigger_check_at of this Datagroup.
        :type: int
        """

        self._trigger_check_at = trigger_check_at

    @property
    def trigger_error(self):
        """
        Gets the trigger_error of this Datagroup.
        The message returned with the error of the last trigger check.

        :return: The trigger_error of this Datagroup.
        :rtype: str
        """
        return self._trigger_error

    @trigger_error.setter
    def trigger_error(self, trigger_error):
        """
        Sets the trigger_error of this Datagroup.
        The message returned with the error of the last trigger check.

        :param trigger_error: The trigger_error of this Datagroup.
        :type: str
        """

        self._trigger_error = trigger_error

    @property
    def trigger_value(self):
        """
        Gets the trigger_value of this Datagroup.
        The value of the trigger when last checked.

        :return: The trigger_value of this Datagroup.
        :rtype: str
        """
        return self._trigger_value

    @trigger_value.setter
    def trigger_value(self, trigger_value):
        """
        Sets the trigger_value of this Datagroup.
        The value of the trigger when last checked.

        :param trigger_value: The trigger_value of this Datagroup.
        :type: str
        """

        self._trigger_value = trigger_value

    @property
    def triggered_at(self):
        """
        Gets the triggered_at of this Datagroup.
        UNIX timestamp at which this entry became triggered. Cannot be in the future.

        :return: The triggered_at of this Datagroup.
        :rtype: int
        """
        return self._triggered_at

    @triggered_at.setter
    def triggered_at(self, triggered_at):
        """
        Sets the triggered_at of this Datagroup.
        UNIX timestamp at which this entry became triggered. Cannot be in the future.

        :param triggered_at: The triggered_at of this Datagroup.
        :type: int
        """

        self._triggered_at = triggered_at

    @property
    def can(self):
        """
        Gets the can of this Datagroup.
        Operations the current user is able to perform on this object

        :return: The can of this Datagroup.
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """
        Sets the can of this Datagroup.
        Operations the current user is able to perform on this object

        :param can: The can of this Datagroup.
        :type: dict(str, bool)
        """

        self._can = can

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Datagroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
