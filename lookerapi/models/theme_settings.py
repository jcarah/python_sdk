# coding: utf-8

"""
    Looker API 3.1 Reference

    ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  Note! With great power comes great responsibility: The \"Try It Out!\" button makes API calls to your live Looker instance. Be especially careful with destructive API operations such as `delete_user` or similar. There is no \"undo\" for API operations.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning)  This **API 3.1** is in active development. This is where support for new Looker features will appear as non-breaking additions - new functions, new optional parameters on existing functions, or new optional properties in existing types. Additive changes should not impact your existing application code that calls the Looker API. Your existing application code will not be aware of any new Looker API functionality until you choose to upgrade your app to use a newer Looker API client SDK release.  The following are a few examples of noteworthy items that have changed between API 3.0 and API 3.1. For more comprehensive coverage of API changes, please see the release notes for your Looker release.   ### Examples of new things added in API 3.1:  * Dashboard construction APIs * Themes and custom color collections APIs * Create and run SQL_runner queries * Create and run merged results queries * Create and modify dashboard filters * Create and modify password requirements   ### Deprecated in API 3.0  The following functions and properties have been deprecated in API 3.0.  They continue to exist and work in API 3.0 for the next several Looker releases but they have not been carried forward to API 3.1:  * Dashboard Prefetch functions * User access_filter functions * User API 1.0 credentials functions * Space.is_root and Space.is_user_root properties. Use Space.is_shared_root and Space.is_users_root instead.   ### Semantic changes in API 3.1:  * `all_looks` no longer includes soft-deleted looks, matching `all_dashboards` behavior. You can find soft-deleted looks using `search_looks` with the `deleted` param set to True. * `all_spaces` no longer includes duplicate items * `search_users` no longer accepts Y,y,1,0,N,n for Boolean params, only \"true\" and \"false\". * For greater client and network compatibility, `render_task_results` now returns HTTP status ***202 Accepted*** instead of HTTP status ***102 Processing*** * `all_running_queries` and `kill_query` functions have moved into the `Query` function group.   If you have application code which relies on the old behavior of the APIs above, you may continue using the API 3.0 functions in this Looker release. We strongly suggest you update your code to use API 3.1 analogs as soon as possible.  

    OpenAPI spec version: 3.1.0
    Contact: support@looker.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ThemeSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, background_color=None, base_font_size=None, color_collection_id=None, font_color=None, font_family=None, font_source=None, info_button_color=None, primary_button_color=None, show_filters_bar=None, show_title=None, text_tile_text_color=None, tile_background_color=None, tile_text_color=None, title_color=None, warn_button_color=None):
        """
        ThemeSettings - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'background_color': 'str',
            'base_font_size': 'str',
            'color_collection_id': 'str',
            'font_color': 'str',
            'font_family': 'str',
            'font_source': 'str',
            'info_button_color': 'str',
            'primary_button_color': 'str',
            'show_filters_bar': 'bool',
            'show_title': 'bool',
            'text_tile_text_color': 'str',
            'tile_background_color': 'str',
            'tile_text_color': 'str',
            'title_color': 'str',
            'warn_button_color': 'str'
        }

        self.attribute_map = {
            'background_color': 'background_color',
            'base_font_size': 'base_font_size',
            'color_collection_id': 'color_collection_id',
            'font_color': 'font_color',
            'font_family': 'font_family',
            'font_source': 'font_source',
            'info_button_color': 'info_button_color',
            'primary_button_color': 'primary_button_color',
            'show_filters_bar': 'show_filters_bar',
            'show_title': 'show_title',
            'text_tile_text_color': 'text_tile_text_color',
            'tile_background_color': 'tile_background_color',
            'tile_text_color': 'tile_text_color',
            'title_color': 'title_color',
            'warn_button_color': 'warn_button_color'
        }

        self._background_color = background_color
        self._base_font_size = base_font_size
        self._color_collection_id = color_collection_id
        self._font_color = font_color
        self._font_family = font_family
        self._font_source = font_source
        self._info_button_color = info_button_color
        self._primary_button_color = primary_button_color
        self._show_filters_bar = show_filters_bar
        self._show_title = show_title
        self._text_tile_text_color = text_tile_text_color
        self._tile_background_color = tile_background_color
        self._tile_text_color = tile_text_color
        self._title_color = title_color
        self._warn_button_color = warn_button_color

    @property
    def background_color(self):
        """
        Gets the background_color of this ThemeSettings.
        Default background color

        :return: The background_color of this ThemeSettings.
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """
        Sets the background_color of this ThemeSettings.
        Default background color

        :param background_color: The background_color of this ThemeSettings.
        :type: str
        """

        self._background_color = background_color

    @property
    def base_font_size(self):
        """
        Gets the base_font_size of this ThemeSettings.
        Base font size for scaling fonts

        :return: The base_font_size of this ThemeSettings.
        :rtype: str
        """
        return self._base_font_size

    @base_font_size.setter
    def base_font_size(self, base_font_size):
        """
        Sets the base_font_size of this ThemeSettings.
        Base font size for scaling fonts

        :param base_font_size: The base_font_size of this ThemeSettings.
        :type: str
        """

        self._base_font_size = base_font_size

    @property
    def color_collection_id(self):
        """
        Gets the color_collection_id of this ThemeSettings.
        Optional. ID of color collection to use with the theme. Use an empty string for none.

        :return: The color_collection_id of this ThemeSettings.
        :rtype: str
        """
        return self._color_collection_id

    @color_collection_id.setter
    def color_collection_id(self, color_collection_id):
        """
        Sets the color_collection_id of this ThemeSettings.
        Optional. ID of color collection to use with the theme. Use an empty string for none.

        :param color_collection_id: The color_collection_id of this ThemeSettings.
        :type: str
        """

        self._color_collection_id = color_collection_id

    @property
    def font_color(self):
        """
        Gets the font_color of this ThemeSettings.
        Default font color

        :return: The font_color of this ThemeSettings.
        :rtype: str
        """
        return self._font_color

    @font_color.setter
    def font_color(self, font_color):
        """
        Sets the font_color of this ThemeSettings.
        Default font color

        :param font_color: The font_color of this ThemeSettings.
        :type: str
        """

        self._font_color = font_color

    @property
    def font_family(self):
        """
        Gets the font_family of this ThemeSettings.
        Primary font family

        :return: The font_family of this ThemeSettings.
        :rtype: str
        """
        return self._font_family

    @font_family.setter
    def font_family(self, font_family):
        """
        Sets the font_family of this ThemeSettings.
        Primary font family

        :param font_family: The font_family of this ThemeSettings.
        :type: str
        """

        self._font_family = font_family

    @property
    def font_source(self):
        """
        Gets the font_source of this ThemeSettings.
        Source specification for font

        :return: The font_source of this ThemeSettings.
        :rtype: str
        """
        return self._font_source

    @font_source.setter
    def font_source(self, font_source):
        """
        Sets the font_source of this ThemeSettings.
        Source specification for font

        :param font_source: The font_source of this ThemeSettings.
        :type: str
        """

        self._font_source = font_source

    @property
    def info_button_color(self):
        """
        Gets the info_button_color of this ThemeSettings.
        Info button color

        :return: The info_button_color of this ThemeSettings.
        :rtype: str
        """
        return self._info_button_color

    @info_button_color.setter
    def info_button_color(self, info_button_color):
        """
        Sets the info_button_color of this ThemeSettings.
        Info button color

        :param info_button_color: The info_button_color of this ThemeSettings.
        :type: str
        """

        self._info_button_color = info_button_color

    @property
    def primary_button_color(self):
        """
        Gets the primary_button_color of this ThemeSettings.
        Primary button color

        :return: The primary_button_color of this ThemeSettings.
        :rtype: str
        """
        return self._primary_button_color

    @primary_button_color.setter
    def primary_button_color(self, primary_button_color):
        """
        Sets the primary_button_color of this ThemeSettings.
        Primary button color

        :param primary_button_color: The primary_button_color of this ThemeSettings.
        :type: str
        """

        self._primary_button_color = primary_button_color

    @property
    def show_filters_bar(self):
        """
        Gets the show_filters_bar of this ThemeSettings.
        Toggle to show filters. Defaults to true.

        :return: The show_filters_bar of this ThemeSettings.
        :rtype: bool
        """
        return self._show_filters_bar

    @show_filters_bar.setter
    def show_filters_bar(self, show_filters_bar):
        """
        Sets the show_filters_bar of this ThemeSettings.
        Toggle to show filters. Defaults to true.

        :param show_filters_bar: The show_filters_bar of this ThemeSettings.
        :type: bool
        """

        self._show_filters_bar = show_filters_bar

    @property
    def show_title(self):
        """
        Gets the show_title of this ThemeSettings.
        Toggle to show the title. Defaults to true.

        :return: The show_title of this ThemeSettings.
        :rtype: bool
        """
        return self._show_title

    @show_title.setter
    def show_title(self, show_title):
        """
        Sets the show_title of this ThemeSettings.
        Toggle to show the title. Defaults to true.

        :param show_title: The show_title of this ThemeSettings.
        :type: bool
        """

        self._show_title = show_title

    @property
    def text_tile_text_color(self):
        """
        Gets the text_tile_text_color of this ThemeSettings.
        Text color for text tiles

        :return: The text_tile_text_color of this ThemeSettings.
        :rtype: str
        """
        return self._text_tile_text_color

    @text_tile_text_color.setter
    def text_tile_text_color(self, text_tile_text_color):
        """
        Sets the text_tile_text_color of this ThemeSettings.
        Text color for text tiles

        :param text_tile_text_color: The text_tile_text_color of this ThemeSettings.
        :type: str
        """

        self._text_tile_text_color = text_tile_text_color

    @property
    def tile_background_color(self):
        """
        Gets the tile_background_color of this ThemeSettings.
        Background color for tiles

        :return: The tile_background_color of this ThemeSettings.
        :rtype: str
        """
        return self._tile_background_color

    @tile_background_color.setter
    def tile_background_color(self, tile_background_color):
        """
        Sets the tile_background_color of this ThemeSettings.
        Background color for tiles

        :param tile_background_color: The tile_background_color of this ThemeSettings.
        :type: str
        """

        self._tile_background_color = tile_background_color

    @property
    def tile_text_color(self):
        """
        Gets the tile_text_color of this ThemeSettings.
        Text color for tiles

        :return: The tile_text_color of this ThemeSettings.
        :rtype: str
        """
        return self._tile_text_color

    @tile_text_color.setter
    def tile_text_color(self, tile_text_color):
        """
        Sets the tile_text_color of this ThemeSettings.
        Text color for tiles

        :param tile_text_color: The tile_text_color of this ThemeSettings.
        :type: str
        """

        self._tile_text_color = tile_text_color

    @property
    def title_color(self):
        """
        Gets the title_color of this ThemeSettings.
        Color for titles

        :return: The title_color of this ThemeSettings.
        :rtype: str
        """
        return self._title_color

    @title_color.setter
    def title_color(self, title_color):
        """
        Sets the title_color of this ThemeSettings.
        Color for titles

        :param title_color: The title_color of this ThemeSettings.
        :type: str
        """

        self._title_color = title_color

    @property
    def warn_button_color(self):
        """
        Gets the warn_button_color of this ThemeSettings.
        Warning button color

        :return: The warn_button_color of this ThemeSettings.
        :rtype: str
        """
        return self._warn_button_color

    @warn_button_color.setter
    def warn_button_color(self, warn_button_color):
        """
        Sets the warn_button_color of this ThemeSettings.
        Warning button color

        :param warn_button_color: The warn_button_color of this ThemeSettings.
        :type: str
        """

        self._warn_button_color = warn_button_color

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ThemeSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
